"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    float,
    int,
    type,
)
from collections.abc import (
    Iterable,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import (
    EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    Literal,
    NewType,
    final,
    overload,
)

DESCRIPTOR: FileDescriptor


_CurrencyValues: _CurrencyValues

class _CurrencyValues:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType


_CurrencyValuesEnumTypeWrapper: _CurrencyValuesEnumTypeWrapper

class _CurrencyValuesEnumTypeWrapper(EnumTypeWrapper[_CurrencyValues.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    UNSPECIFIED: _CurrencyValues.ValueType  # 0
    RUB: _CurrencyValues.ValueType  # 1
    USD: _CurrencyValues.ValueType  # 2
    EUR: _CurrencyValues.ValueType  # 3
    KZT: _CurrencyValues.ValueType  # 4


CurrencyValues: CurrencyValues

class CurrencyValues(_CurrencyValues, metaclass=_CurrencyValuesEnumTypeWrapper): ...

UNSPECIFIED: CurrencyValues.ValueType  # 0
RUB: CurrencyValues.ValueType  # 1
USD: CurrencyValues.ValueType  # 2
EUR: CurrencyValues.ValueType  # 3
KZT: CurrencyValues.ValueType  # 4


CurrencyResponse: CurrencyResponse

class CurrencyResponse(Message):
    DESCRIPTOR: Descriptor

    ALLCURRENCIES_FIELD_NUMBER: int
    @property
    def allCurrencies(self) -> RepeatedCompositeFieldContainer[Currency]: ...
    def __init__(
        self,
        *,
        allCurrencies: Iterable[Currency] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: Literal["allCurrencies", b"allCurrencies"]) -> None: ...


Currency: Currency

class Currency(Message):
    DESCRIPTOR: Descriptor

    CURRENCY_FIELD_NUMBER: int
    CURRENCYRATE_FIELD_NUMBER: int
    currency: CurrencyValues.ValueType
    currencyRate: float
    def __init__(
        self,
        *,
        currency: CurrencyValues.ValueType | None = ...,
        currencyRate: float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_currency", b"_currency", "_currencyRate", b"_currencyRate", "currency", b"currency", "currencyRate", b"currencyRate"]) -> bool: ...
    def ClearField(self, field_name: Literal["_currency", b"_currency", "_currencyRate", b"_currencyRate", "currency", b"currency", "currencyRate", b"currencyRate"]) -> None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_currency", b"_currency"]) -> Literal["currency"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_currencyRate", b"_currencyRate"]) -> Literal["currencyRate"] | None: ...


CalculateRequest: CalculateRequest

class CalculateRequest(Message):
    DESCRIPTOR: Descriptor

    SPENDCURRENCY_FIELD_NUMBER: int
    DESIREDCURRENCY_FIELD_NUMBER: int
    AMOUNT_FIELD_NUMBER: int
    spendCurrency: CurrencyValues.ValueType
    desiredCurrency: CurrencyValues.ValueType
    amount: float
    def __init__(
        self,
        *,
        spendCurrency: CurrencyValues.ValueType | None = ...,
        desiredCurrency: CurrencyValues.ValueType | None = ...,
        amount: float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_amount", b"_amount", "_desiredCurrency", b"_desiredCurrency", "_spendCurrency", b"_spendCurrency", "amount", b"amount", "desiredCurrency", b"desiredCurrency", "spendCurrency", b"spendCurrency"]) -> bool: ...
    def ClearField(self, field_name: Literal["_amount", b"_amount", "_desiredCurrency", b"_desiredCurrency", "_spendCurrency", b"_spendCurrency", "amount", b"amount", "desiredCurrency", b"desiredCurrency", "spendCurrency", b"spendCurrency"]) -> None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_amount", b"_amount"]) -> Literal["amount"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_desiredCurrency", b"_desiredCurrency"]) -> Literal["desiredCurrency"] | None: ...
    @overload
    def WhichOneof(self, oneof_group: Literal["_spendCurrency", b"_spendCurrency"]) -> Literal["spendCurrency"] | None: ...


CalculateResponse: CalculateResponse

class CalculateResponse(Message):
    DESCRIPTOR: Descriptor

    CALCULATEDAMOUNT_FIELD_NUMBER: int
    calculatedAmount: float
    def __init__(
        self,
        *,
        calculatedAmount: float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: Literal["_calculatedAmount", b"_calculatedAmount", "calculatedAmount", b"calculatedAmount"]) -> bool: ...
    def ClearField(self, field_name: Literal["_calculatedAmount", b"_calculatedAmount", "calculatedAmount", b"calculatedAmount"]) -> None: ...
    def WhichOneof(self, oneof_group: Literal["_calculatedAmount", b"_calculatedAmount"]) -> Literal["calculatedAmount"] | None: ...