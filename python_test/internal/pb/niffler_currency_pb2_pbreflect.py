"""
Generated by pbreflect (https://github.com/ValeriyMenshikov/pbreflect).

Generated client code for guru.qa.grpc.niffler using pbreflect.

This module contains auto-generated gRPC client classes for the guru.qa.grpc.niffler package.
It provides strongly-typed sync gRPC clients that follow the "duck typing" principle.
"""

import grpc
from typing import (
    List,
    Optional,
    Tuple,
)

from internal.pb.niffler_currency_pb2 import (
    CurrencyResponse,
    CalculateRequest,
    CalculateResponse,
)
from google.protobuf import empty_pb2


class _NifflerCurrencyServiceStub:
    """Internal stub class for NifflerCurrencyService service.

    This class provides direct access to the gRPC methods exposed by the service.
    It should not be used directly, but through the NifflerCurrencyServiceClient class.
    """

    def __init__(self, channel: grpc.Channel) -> None:
        """Initialize the stub with a gRPC channel.

        Args:
            channel: gRPC channel for communication
        """
        self.GetAllCurrencies = channel.unary_unary(
            "/guru.qa.grpc.niffler.NifflerCurrencyService/GetAllCurrencies",
            request_serializer=empty_pb2.Empty.SerializeToString,
            response_deserializer=CurrencyResponse.FromString,
        )
        self.CalculateRate = channel.unary_unary(
            "/guru.qa.grpc.niffler.NifflerCurrencyService/CalculateRate",
            request_serializer=CalculateRequest.SerializeToString,
            response_deserializer=CalculateResponse.FromString,
        )


class NifflerCurrencyServiceClient:
    """Client for the NifflerCurrencyService service.

    This class provides a strongly-typed sync interface to the gRPC service.
    """

    def __init__(self, channel: grpc.Channel) -> None:
        """Initialize the client with a gRPC channel.

        Args:
            channel: gRPC channel for communication
        """
        self._stub = _NifflerCurrencyServiceStub(channel)

    def get_all_currencies(
        self,
        request: empty_pb2.Empty,
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> CurrencyResponse:
        call = self._stub.GetAllCurrencies(
            request,
            metadata=metadata,
            timeout=timeout,
        )
        return call

    def calculate_rate(
        self,
        request: CalculateRequest,
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> CalculateResponse:
        call = self._stub.CalculateRate(
            request,
            metadata=metadata,
            timeout=timeout,
        )
        return call