"""
Generated by pbreflect (https://github.com/ValeriyMenshikov/pbreflect).

Generated client code for grpc.health.v1 using pbreflect.

This module contains auto-generated gRPC client classes for the grpc.health.v1 package.
It provides strongly-typed sync gRPC clients that follow the "duck typing" principle.
"""

import grpc
from typing import (
    List,
    Optional,
    Tuple,
    Iterable,
)

from grpc.health.v1.health_pb2 import HealthCheckRequest, HealthCheckResponse


class _HealthStub:
    """Internal stub class for Health service.

    This class provides direct access to the gRPC methods exposed by the service.
    It should not be used directly, but through the HealthClient class.
    """

    def __init__(self, channel: grpc.Channel) -> None:
        """Initialize the stub with a gRPC channel.

        Args:
            channel: gRPC channel for communication
        """
        self.Check = channel.unary_unary(
            "/grpc.health.v1.Health/Check",
            request_serializer=HealthCheckRequest.SerializeToString,
            response_deserializer=HealthCheckResponse.FromString,
        )
        self.Watch = channel.unary_stream(
            "/grpc.health.v1.Health/Watch",
            request_serializer=HealthCheckRequest.SerializeToString,
            response_deserializer=HealthCheckResponse.FromString,
        )


class HealthClient:
    """Client for the Health service.

    This class provides a strongly-typed sync interface to the gRPC service.
    """

    def __init__(self, channel: grpc.Channel) -> None:
        """Initialize the client with a gRPC channel.

        Args:
            channel: gRPC channel for communication
        """
        self._stub = _HealthStub(channel)

    def check(
        self,
        request: HealthCheckRequest,
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> HealthCheckResponse:
        call = self._stub.Check(
            request,
            metadata=metadata,
            timeout=timeout,
        )
        return call

    def watch(
        self,
        request: HealthCheckRequest,
        metadata: Optional[List[Tuple[str, str]]] = None,
        timeout: Optional[float] = None,
    ) -> Iterable[HealthCheckResponse]:
        call = self._stub.Watch(
            request,
            metadata=metadata,
            timeout=timeout,
        )
        return call